{"version":3,"file":"index.es.js","sources":["../src/utils/css.ts","../src/utils/fn.ts","../src/button/type.ts","../src/button/style.tsx","../src/utils/wapper.tsx","../src/button/index.tsx","../node_modules/.pnpm/nanoid@4.0.0/node_modules/nanoid/index.browser.js","../src/message/style.tsx","../src/message/index.tsx","../src/portal/index.tsx","../src/modal/style.tsx","../src/utils/getScrollBarSize.ts","../src/utils/hook.tsx","../src/modal/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\r\nexport default function customcss(sx?: React.CSSProperties) {\r\n  return css(sx as any);\r\n}\r\n\r\n/**\r\n * 给元素style添加属性。\r\n */\r\nexport const ObjectToHtmlStyle = (\r\n  obj: React.CSSProperties,\r\n  ele: HTMLElement\r\n) => {\r\n  Object.entries(obj).forEach(([key, value]) => {\r\n    if (value) {\r\n      //@ts-ignore\r\n      ele.style[key] = value;\r\n    }\r\n  });\r\n};\r\n","/**\r\n * @description 简化版选择器\r\n */\r\nexport function DefensiveSwitch<T extends string>(\r\n  params: T,\r\n  targetObj: Record<T, string>,\r\n  defaultRes: string\r\n) {\r\n  return targetObj[params] || defaultRes;\r\n}\r\n","import { DefensiveSwitch } from \"@src/utils/fn\";\r\ntype ButtonShape = \"default\" | \"circle\" | \"round\";\r\nexport const ButtonShapeToCss = (input: ButtonShape) =>\r\n  DefensiveSwitch(\r\n    input,\r\n    { default: \"4px\", circle: \"50%\", round: \"8px\" },\r\n    \"0px\"\r\n  );\r\ntype ButtonSize = \"large\" | \"middle\" | \"small\";\r\nexport const ButtonSizeToCss = (input: ButtonSize) =>\r\n  DefensiveSwitch(input, { large: \"\", middle: \"\", small: \"\" }, \"\");\r\ntype ButtonType = \"primary\" | \"default\" | \"text\" | \"dashed\";\r\nexport const ButtonTypeToCss = (input: ButtonType) =>\r\n  DefensiveSwitch(\r\n    input,\r\n    { primary: \"\", default: \"\", text: \"\", dashed: \"\" },\r\n    \"\"\r\n  );\r\ntype NativeButtonProps = Omit<\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  \"type\" | \"onClick\"\r\n>;\r\nexport type CustomButtonProps = Partial<{\r\n  shape: ButtonShape;\r\n  size: ButtonSize;\r\n  type: ButtonType;\r\n  sx: React.CSSProperties;\r\n}>;\r\nexport type ButtonProps = NativeButtonProps & CustomButtonProps;\r\n","import styled from \"@emotion/styled\";\r\nimport { ButtonShapeToCss, CustomButtonProps } from \"./type\";\r\n\r\nexport const ButtonWrapper = styled.button`\r\n  font-size: 16px;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 8px 16px;\r\n  border-radius: ${(props) =>\r\n    ButtonShapeToCss((props.theme as CustomButtonProps).shape!!)};\r\n`;\r\n//todo 进行自定义\r\n","import { ReactElement } from \"react\";\r\nimport { ThemeProvider } from \"@emotion/react\";\r\n\r\nexport default function CustomThemeProvider<T>(props: {\r\n  theme: T;\r\n  children: ReactElement;\r\n}) {\r\n  return (\r\n    <ThemeProvider theme={props.theme as any}>{props.children}</ThemeProvider>\r\n  );\r\n}\r\n","import customcss from \"../utils/css\";\r\nimport { ButtonWrapper } from \"./style\";\r\nimport { ButtonProps, CustomButtonProps } from \"./type\";\r\nimport CustomThemeProvider from \"@src/utils/wapper\";\r\n\r\nexport default function Button(props: ButtonProps) {\r\n  const {\r\n    sx,\r\n    shape = \"default\",\r\n    size = \"middle\",\r\n    type = \"default\",\r\n    ...resProps\r\n  } = props;\r\n  const ButtonTheme: CustomButtonProps = {\r\n    shape,\r\n    size,\r\n    type,\r\n  };\r\n  return (\r\n    <CustomThemeProvider theme={ButtonTheme}>\r\n      <ButtonWrapper css={customcss(props.sx)} {...resProps}>\r\n        {props.children}\r\n      </ButtonWrapper>\r\n    </CustomThemeProvider>\r\n  );\r\n}\r\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { css, keyframes } from \"@emotion/react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\n/**\r\n * message components keyframes\r\n */\r\nexport const keyframesMessageIn = keyframes`\r\n     from {\r\n        opacity: 0;\r\n        transform: translateY(-10px);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n    }\r\n`,\r\n  keyframesMessageOut = keyframes`\r\n    0% {\r\n            opacity: 1;\r\n            transform: translateY(0);\r\n    }\r\n    to {\r\n        opacity: 0;\r\n        transform: translateY(-10px);\r\n    }\r\n`;\r\n/**\r\n * message animation constructor\r\n */\r\nexport const MessagePAnimationConstructor = (\r\n  durantion: number = 3,\r\n  transformTime: number = 0.1\r\n) => {\r\n  if (durantion < transformTime) {\r\n    throw new Error(\r\n      `You can't let the animation transition time exceed the total duration!`\r\n    );\r\n  }\r\n  return css`\r\n    animation: ${keyframesMessageIn} ${transformTime} linear,\r\n      ${keyframesMessageOut} ${transformTime} linear\r\n        ${durantion - transformTime} forwards;\r\n  `;\r\n};\r\n\r\nexport const MessageP = styled.p`\r\n  border-radius: 8px;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 2px 10px;\r\n  padding: 12px 24px;\r\n  margin-bottom: 10px;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  /* ${MessagePAnimationConstructor(3, 0.1)} */\r\n`;\r\n","import { FC, useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { MessageP } from \"./style\";\r\nimport { ObjectToHtmlStyle } from \"@src/utils/css\";\r\nimport { MessageItemProps, Notice, MessageType } from \"./type\";\r\n\r\n//todo 增加svg的显示\r\nconst MessageItem: FC<MessageItemProps> = (props) => {\r\n  const { text, type } = props;\r\n  return (\r\n    <MessageP>\r\n      <span>{text}</span>\r\n    </MessageP>\r\n  );\r\n};\r\n\r\nlet add: (message: Notice) => void;\r\nconst containerId = `container_${nanoid(4)}`;\r\n\r\nfunction getContainer() {\r\n  let resDom = document.querySelector(containerId) as HTMLElement;\r\n  if (!resDom) {\r\n    resDom = document.createElement(\"div\");\r\n    resDom.id = containerId;\r\n    ObjectToHtmlStyle(\r\n      {\r\n        position: \"fixed\",\r\n        top: \"10px\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, 0)\",\r\n        zIndex: \"9999\",\r\n      },\r\n      resDom\r\n    );\r\n    document.body.appendChild(resDom);\r\n  }\r\n  return resDom;\r\n}\r\n\r\nconst MessageContainer = () => {\r\n  const [msgList, setList] = useState<Notice[]>([]);\r\n  //todo 改成options\r\n  const timeout = 3000;\r\n  const remove = (msg: Notice) =>\r\n    setList((prevList) => prevList.filter((item) => msg.key !== item.key));\r\n  //hack\r\n  add = (msg) => {\r\n    setList((pre) => [...pre, msg]);\r\n    setTimeout(() => {\r\n      // remove(msg);\r\n    }, timeout);\r\n  };\r\n  return (\r\n    <>\r\n      {msgList.map((msg) => (\r\n        <MessageItem {...msg} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nconst message = (() => {\r\n  createRoot(getContainer()).render(<MessageContainer />);\r\n  const msgType = (type: MessageType) => (text: string) =>\r\n    add({ text, type, key: nanoid(3) });\r\n  return {\r\n    info: msgType(\"info\"),\r\n  };\r\n})();\r\n\r\nexport default message;\r\n//todo ！！！ 改成动态创建\r\n","import { createPortal } from \"react-dom\";\r\nimport { ProtalProps } from \"./type\";\r\nexport default function Portal(props: ProtalProps) {\r\n  const { children, ...resProps } = props;\r\n  return createPortal(<div {...resProps}>{children}</div>, document.body);\r\n}\r\n","import styled from \"@emotion/styled\";\r\n\r\nexport const ModalContainer = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 100;\r\n`;\r\n","let cached: number | null = null;\r\n\r\nexport default function getScrollBarSize(): number {\r\n  if (typeof cached === \"number\") {\r\n    return cached;\r\n  }\r\n  const inner = document.createElement(\"div\");\r\n  inner.style.width = \"100%\";\r\n  inner.style.height = \"200px\";\r\n  const outer = document.createElement(\"div\"),\r\n    outerStyle = outer.style;\r\n  outerStyle.position = \"absolute\";\r\n  outerStyle.top = \"0\";\r\n  outerStyle.left = \"0\";\r\n  outerStyle.pointerEvents = \"none\";\r\n  outerStyle.visibility = \"hidden\";\r\n  outerStyle.width = \"200px\";\r\n  outerStyle.height = \"150px\";\r\n  outerStyle.overflow = \"hidden\";\r\n  outer.appendChild(inner);\r\n  document.body.appendChild(outer);\r\n  const widthContained = inner.offsetWidth;\r\n  outer.style.overflow = \"scroll\";\r\n  let widthScroll = inner.offsetWidth;\r\n\r\n  if (widthContained === widthScroll) {\r\n    widthScroll = outer.clientWidth;\r\n  }\r\n\r\n  document.body.removeChild(outer);\r\n  cached = widthContained - widthScroll;\r\n  return cached;\r\n}\r\n","import { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { ReactClientRect, ReactRef } from \"./type\";\r\nimport getScrollBarSize from \"./getScrollBarSize\";\r\n/**\r\n * @description 获取ref元素的clientRect属性值\r\n */\r\nexport const useClientRect = (ele: ReactRef) => {\r\n  const [clientRect, setClientRect] = useState<ReactClientRect>(null);\r\n\r\n  // 更新元素的 ClientRect\r\n  const updateClientRect = useCallback(() => {\r\n    // return () =>\r\n    setClientRect(ele.current!.getBoundingClientRect());\r\n  }, []);\r\n\r\n  // 只有当 React 组件 didMount 时，才能取到元素的 ClientRect，所以这里要使用 useLayoutEffect\r\n  useLayoutEffect(() => {\r\n    if (ele.current) {\r\n      updateClientRect();\r\n    }\r\n  }, []);\r\n\r\n  return clientRect;\r\n};\r\n\r\ninterface HuseplacementProps {\r\n  triggerRect: ReactClientRect;\r\n  contentRect: ReactClientRect;\r\n  //todo 添加位置\r\n}\r\ninterface TransFormCss {\r\n  transform: string;\r\n}\r\n\r\nexport const usePlacement = ({\r\n  triggerRect,\r\n  contentRect,\r\n}: HuseplacementProps): TransFormCss => {\r\n  const [transform, set] = useState<TransFormCss>({ transform: \"\" });\r\n  useEffect(() => {\r\n    if (!contentRect || !triggerRect) {\r\n      return;\r\n    }\r\n    const {\r\n        left: ContentLeftPxNum,\r\n        width: ContentWidthPxNum,\r\n        top: ContentTopPxNum,\r\n        height: ContentHeightPxNum,\r\n      } = contentRect!,\r\n      {\r\n        left: TriggerLeftPxNum,\r\n        width: TriggerWidthPxNum,\r\n        top: TriggerTopPxNum,\r\n        height: TriggerHeightPxNum,\r\n      } = triggerRect!;\r\n    //todo 目前是放到上面，后续要根据位置调整\r\n    const transFormX = ContentLeftPxNum,\r\n      transFormY = ContentTopPxNum;\r\n    console.log({ transFormX, transFormY });\r\n    set((obj) => ({\r\n      transform: `translate(${transFormX}px,${transFormY}px)`,\r\n    }));\r\n  }, [contentRect, triggerRect]);\r\n  return transform;\r\n};\r\n\r\nexport const useBodyScrollHide = (hidden: boolean) => {\r\n  useEffect(() => {\r\n    const ScrollSize = getScrollBarSize(),\r\n      bodyStyle = document.body.style;\r\n    if (hidden) {\r\n      bodyStyle.overflow = \"hidden\";\r\n      bodyStyle.paddingRight = `${ScrollSize}px`;\r\n    }\r\n    return () => {\r\n      bodyStyle.overflow = \"\";\r\n      bodyStyle.paddingRight = \"\";\r\n    };\r\n  }, [hidden]);\r\n};\r\n","import Portal from \"@src/portal\";\r\nimport { ModalContainer } from \"./style\";\r\nimport type { ModalProps } from \"./type\";\r\nimport { useBodyScrollHide } from \"@src/utils/hook\";\r\nimport { ReactClickEvent } from \"../utils/type\";\r\n\r\nexport default function Modal(props: ModalProps) {\r\n  const { visible = true, children, closeModal, ...resProps } = props,\r\n    handlerClick = (event: ReactClickEvent) => {\r\n      event.stopPropagation();\r\n      if (event.target === event.currentTarget) {\r\n        closeModal();\r\n      }\r\n    };\r\n  useBodyScrollHide(visible);\r\n  return (\r\n    <>\r\n      {visible && (\r\n        <Portal>\r\n          <ModalContainer onClick={handlerClick} {...resProps}>\r\n            {children}\r\n          </ModalContainer>\r\n        </Portal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"names":["customcss","sx","css","ObjectToHtmlStyle","obj","ele","key","value","DefensiveSwitch","params","targetObj","defaultRes","ButtonShapeToCss","input","ButtonWrapper","styled","props","CustomThemeProvider","ThemeProvider","Button","shape","size","type","resProps","jsx","nanoid","id","byte","keyframesMessageIn","keyframes","keyframesMessageOut","MessagePAnimationConstructor","durantion","transformTime","MessageP","MessageItem","text","add","containerId","getContainer","resDom","MessageContainer","msgList","setList","useState","timeout","msg","pre","Fragment","message","createRoot","Portal","children","createPortal","ModalContainer","cached","getScrollBarSize","inner","outer","outerStyle","widthContained","widthScroll","useBodyScrollHide","hidden","useEffect","ScrollSize","bodyStyle","Modal","visible","closeModal","handlerClick","event"],"mappings":"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"}